#!/bin/sh
// 2> /dev/null || exec fiji --headless --bsh "$0" "$@"

import ij.IJ;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;

File cwd = new File(System.getProperty("fiji.dir"), "src-plugins/FFMPEG_IO");

String platform, target;

if (bsh.args.length > 0)
	platform = bsh.args[0];
else if (IJ.isMacOSX())
	platform = "macosx";
else if (IJ.isLinux())
	platform = "linux" + (IJ.is64Bit() ? "64" : "");
else if (IJ.isWindows())
	platform = "win" + (IJ.is64Bit() ? "64" : "32");
else {
	System.err.println("Unknown platform");
	System.exit(1);
}

if (platform.equals("macosx"))
	target = "libffmpeg.dylib";
else if (platform.equals("linux") || platform.equals("linux64"))
	target = "libffmpeg.so";
else if (platform.equals("win32") || platform.equals("win64"))
	target = "ffmpeg.dll";
else {
	System.err.println("Unknown platform: " + platform);
	System.exit(1);
}

// Fake stuff

addClassPath(System.getProperty("fiji.dir") + "/jars/fake.jar");
import fiji.build.Fake.Parser;

// Using fiji.build.Fake to avoid getting the Fake in the default package
fiji.build.Fake fake = new fiji.build.Fake();
Parser parse(String fakefile) {
	Parser parser = fake.parse(new ByteArrayInputStream(fakefile.getBytes()), cwd);
	parser.parseRules(null);
	return parser;
}
void make(String fakefile, String target) {
	fake.make(new ByteArrayInputStream(fakefile.getBytes()), cwd,
		new String[] { target });
}

String fakefilePrefix =
	"buildDir=build/\n" +
	"javaVersion=1.5\n";

// Make sure that ffmpeg/ is dirty when the platform is different than last time
File ffmpegDir = new File(cwd, "ffmpeg");
File platformFile = new File(ffmpegDir, ".platform");
if (ffmpegDir.exists()) {
	String savedPlatform = null;
	if (platformFile.exists()) {
		in = new java.io.BufferedReader(new java.io.FileReader(platformFile));
		savedPlatform = in.readLine();
		in.close();
	}

	if (savedPlatform == null || !platform.equals(savedPlatform)) {
		out = new java.io.FileWriter(platformFile);
		out.write(platform);
		out.close();
	}
}

String libraryTarget = System.getProperty("fiji.dir") + "/lib/" + platform + "/" + target;
String avformatTarget = "classes/fiji/ffmpeg/AVFORMAT.java";
String pluginJarName = "FFMPEG_IO.jar";

String fakefile = fakefilePrefix +
	"all <- ffmpeg/" + target + "\n" +
	"\n" +
	"ffmpeg/" + target + "[sh build.sh " + platform + " " + target + "] <-"
		+ " avlog.c"
		+ (ffmpegDir.exists() ? " ffmpeg/**/*" : "") + "\n" +
	"\n" +
	libraryTarget + "[cp $PRE $TARGET] <- ffmpeg/" + target + "\n";

Parser parser = parse(fakefile);
parser.getRule("ffmpeg/" + target).make();
if (!parser.getRule(libraryTarget).upToDate())
	Util.copyFile("ffmpeg/" + target, libraryTarget, cwd);

fakefile += "\n" +
	avformatTarget + "[generate-classes] <- " + (ffmpegDir.exists() ? "ffmpeg/**/*.h " : "") + "generator.jar\n" +
	"\n" +
	"generator.jar <- GenerateFFMPEGClasses.java\n";
parser = parse(fakefile);
if (!parser.getRule(avformatTarget).upToDate() ||
		!parser.getRule("generator.jar").upToDate()) {
	parser.getRule("generator.jar").make();
	String cwd2 = cwd == null ? "" : cwd.getAbsolutePath() + "/";
	addClassPath(cwd2 + "generator.jar");
	GenerateFFMPEGClasses.main(new String[] {
		cwd2 + "ffmpeg/",
		cwd2 + "classes/"
	});
}

fakefile += "\n" +
	"EXCLUDE(jna-wrapper.jar)=classes/.gitignore\n" +
	"CLASSPATH(jna-wrapper.jar)=$FIJIHOME/jars/jna.jar\n" +
	"jna-wrapper.jar <- classes/**/*\n";
parser = parse(fakefile);
parser.getRule("jna-wrapper.jar").make();

fakefile += "\n" +
	pluginJarName + " <- plugin.jar/ jna-wrapper.jar/\n" +
	"\n" +
	"CLASSPATH(plugin.jar)=jna-wrapper.jar:$FIJIHOME/jars/ij.jar:$FIJIHOME/jars/jna.jar\n" +
	"plugin.jar <- plugin/**/*\n";
parser = parse(fakefile);
parser.getRule(pluginJarName).make();
